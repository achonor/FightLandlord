// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cmd.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cmd.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MainProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MainProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessagePeopleReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePeopleReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessagePeopleRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePeopleRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageStartGameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageStartGameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageStartGameRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageStartGameRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageDealReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageDealReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageDealRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageDealRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageUpdateStateReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageUpdateStateReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageUpdateStateRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageUpdateStateRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageGradLandlordReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageGradLandlordReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageGradLandlordRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageGradLandlordRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageOutPokerReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageOutPokerReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageOutPokerRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageOutPokerRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageGameResultReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageGameResultReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageGameResultRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageGameResultRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageDataPoker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageDataPoker_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cmd_2eproto() {
  protobuf_AddDesc_cmd_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cmd.proto");
  GOOGLE_CHECK(file != NULL);
  MainProto_descriptor_ = file->message_type(0);
  static const int MainProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainProto, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainProto, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainProto, messagename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainProto, messagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainProto, servertime_),
  };
  MainProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MainProto_descriptor_,
      MainProto::default_instance_,
      MainProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MainProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MainProto));
  MessagePeopleReq_descriptor_ = file->message_type(1);
  static const int MessagePeopleReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePeopleReq, peopleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePeopleReq, ischina_),
  };
  MessagePeopleReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagePeopleReq_descriptor_,
      MessagePeopleReq::default_instance_,
      MessagePeopleReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePeopleReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePeopleReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagePeopleReq));
  MessagePeopleRsp_descriptor_ = file->message_type(2);
  static const int MessagePeopleRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePeopleRsp, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePeopleRsp, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePeopleRsp, age_),
  };
  MessagePeopleRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagePeopleRsp_descriptor_,
      MessagePeopleRsp::default_instance_,
      MessagePeopleRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePeopleRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePeopleRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagePeopleRsp));
  MessageLoginReq_descriptor_ = file->message_type(3);
  static const int MessageLoginReq_offsets_[1] = {
  };
  MessageLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageLoginReq_descriptor_,
      MessageLoginReq::default_instance_,
      MessageLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageLoginReq));
  MessageLoginRsp_descriptor_ = file->message_type(4);
  static const int MessageLoginRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageLoginRsp, playerid_),
  };
  MessageLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageLoginRsp_descriptor_,
      MessageLoginRsp::default_instance_,
      MessageLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageLoginRsp));
  MessageStartGameReq_descriptor_ = file->message_type(5);
  static const int MessageStartGameReq_offsets_[1] = {
  };
  MessageStartGameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageStartGameReq_descriptor_,
      MessageStartGameReq::default_instance_,
      MessageStartGameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageStartGameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageStartGameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageStartGameReq));
  MessageStartGameRsp_descriptor_ = file->message_type(6);
  static const int MessageStartGameRsp_offsets_[1] = {
  };
  MessageStartGameRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageStartGameRsp_descriptor_,
      MessageStartGameRsp::default_instance_,
      MessageStartGameRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageStartGameRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageStartGameRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageStartGameRsp));
  MessageDealReq_descriptor_ = file->message_type(7);
  static const int MessageDealReq_offsets_[1] = {
  };
  MessageDealReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageDealReq_descriptor_,
      MessageDealReq::default_instance_,
      MessageDealReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDealReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDealReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageDealReq));
  MessageDealRsp_descriptor_ = file->message_type(8);
  static const int MessageDealRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDealRsp, upnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDealRsp, downnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDealRsp, pokerlist_),
  };
  MessageDealRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageDealRsp_descriptor_,
      MessageDealRsp::default_instance_,
      MessageDealRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDealRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDealRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageDealRsp));
  MessageUpdateStateReq_descriptor_ = file->message_type(9);
  static const int MessageUpdateStateReq_offsets_[1] = {
  };
  MessageUpdateStateReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageUpdateStateReq_descriptor_,
      MessageUpdateStateReq::default_instance_,
      MessageUpdateStateReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageUpdateStateReq));
  MessageUpdateStateRsp_descriptor_ = file->message_type(10);
  static const int MessageUpdateStateRsp_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, playeridx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, statetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, midpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, landlordpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, selfpoker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, uppokernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, downpokernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, lavetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, lastisgrad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, lastisout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, landlordidx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, lastoutplayeridx_),
  };
  MessageUpdateStateRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageUpdateStateRsp_descriptor_,
      MessageUpdateStateRsp::default_instance_,
      MessageUpdateStateRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageUpdateStateRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageUpdateStateRsp));
  MessageGradLandlordReq_descriptor_ = file->message_type(11);
  static const int MessageGradLandlordReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGradLandlordReq, isgrad_),
  };
  MessageGradLandlordReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageGradLandlordReq_descriptor_,
      MessageGradLandlordReq::default_instance_,
      MessageGradLandlordReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGradLandlordReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGradLandlordReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageGradLandlordReq));
  MessageGradLandlordRsp_descriptor_ = file->message_type(12);
  static const int MessageGradLandlordRsp_offsets_[1] = {
  };
  MessageGradLandlordRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageGradLandlordRsp_descriptor_,
      MessageGradLandlordRsp::default_instance_,
      MessageGradLandlordRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGradLandlordRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGradLandlordRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageGradLandlordRsp));
  MessageOutPokerReq_descriptor_ = file->message_type(13);
  static const int MessageOutPokerReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageOutPokerReq, poker_),
  };
  MessageOutPokerReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageOutPokerReq_descriptor_,
      MessageOutPokerReq::default_instance_,
      MessageOutPokerReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageOutPokerReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageOutPokerReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageOutPokerReq));
  MessageOutPokerRsp_descriptor_ = file->message_type(14);
  static const int MessageOutPokerRsp_offsets_[1] = {
  };
  MessageOutPokerRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageOutPokerRsp_descriptor_,
      MessageOutPokerRsp::default_instance_,
      MessageOutPokerRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageOutPokerRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageOutPokerRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageOutPokerRsp));
  MessageGameResultReq_descriptor_ = file->message_type(15);
  static const int MessageGameResultReq_offsets_[1] = {
  };
  MessageGameResultReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageGameResultReq_descriptor_,
      MessageGameResultReq::default_instance_,
      MessageGameResultReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGameResultReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGameResultReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageGameResultReq));
  MessageGameResultRsp_descriptor_ = file->message_type(16);
  static const int MessageGameResultRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGameResultRsp, iswinning_),
  };
  MessageGameResultRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageGameResultRsp_descriptor_,
      MessageGameResultRsp::default_instance_,
      MessageGameResultRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGameResultRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageGameResultRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageGameResultRsp));
  MessageDataPoker_descriptor_ = file->message_type(17);
  static const int MessageDataPoker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataPoker, color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataPoker, number_),
  };
  MessageDataPoker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageDataPoker_descriptor_,
      MessageDataPoker::default_instance_,
      MessageDataPoker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataPoker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageDataPoker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageDataPoker));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cmd_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MainProto_descriptor_, &MainProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagePeopleReq_descriptor_, &MessagePeopleReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagePeopleRsp_descriptor_, &MessagePeopleRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageLoginReq_descriptor_, &MessageLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageLoginRsp_descriptor_, &MessageLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageStartGameReq_descriptor_, &MessageStartGameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageStartGameRsp_descriptor_, &MessageStartGameRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageDealReq_descriptor_, &MessageDealReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageDealRsp_descriptor_, &MessageDealRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageUpdateStateReq_descriptor_, &MessageUpdateStateReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageUpdateStateRsp_descriptor_, &MessageUpdateStateRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageGradLandlordReq_descriptor_, &MessageGradLandlordReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageGradLandlordRsp_descriptor_, &MessageGradLandlordRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageOutPokerReq_descriptor_, &MessageOutPokerReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageOutPokerRsp_descriptor_, &MessageOutPokerRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageGameResultReq_descriptor_, &MessageGameResultReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageGameResultRsp_descriptor_, &MessageGameResultRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageDataPoker_descriptor_, &MessageDataPoker::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cmd_2eproto() {
  delete MainProto::default_instance_;
  delete MainProto_reflection_;
  delete MessagePeopleReq::default_instance_;
  delete MessagePeopleReq_reflection_;
  delete MessagePeopleRsp::default_instance_;
  delete MessagePeopleRsp_reflection_;
  delete MessageLoginReq::default_instance_;
  delete MessageLoginReq_reflection_;
  delete MessageLoginRsp::default_instance_;
  delete MessageLoginRsp_reflection_;
  delete MessageStartGameReq::default_instance_;
  delete MessageStartGameReq_reflection_;
  delete MessageStartGameRsp::default_instance_;
  delete MessageStartGameRsp_reflection_;
  delete MessageDealReq::default_instance_;
  delete MessageDealReq_reflection_;
  delete MessageDealRsp::default_instance_;
  delete MessageDealRsp_reflection_;
  delete MessageUpdateStateReq::default_instance_;
  delete MessageUpdateStateReq_reflection_;
  delete MessageUpdateStateRsp::default_instance_;
  delete MessageUpdateStateRsp_reflection_;
  delete MessageGradLandlordReq::default_instance_;
  delete MessageGradLandlordReq_reflection_;
  delete MessageGradLandlordRsp::default_instance_;
  delete MessageGradLandlordRsp_reflection_;
  delete MessageOutPokerReq::default_instance_;
  delete MessageOutPokerReq_reflection_;
  delete MessageOutPokerRsp::default_instance_;
  delete MessageOutPokerRsp_reflection_;
  delete MessageGameResultReq::default_instance_;
  delete MessageGameResultReq_reflection_;
  delete MessageGameResultRsp::default_instance_;
  delete MessageGameResultRsp_reflection_;
  delete MessageDataPoker::default_instance_;
  delete MessageDataPoker_reflection_;
}

void protobuf_AddDesc_cmd_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tcmd.proto\"n\n\tMainProto\022\020\n\010playerID\030\001 \002"
    "(\005\022\021\n\tmessageID\030\002 \002(\005\022\023\n\013messageName\030\003 \001"
    "(\t\022\023\n\013messageData\030\004 \001(\t\022\022\n\nserverTime\030\005 "
    "\001(\001\"5\n\020MessagePeopleReq\022\020\n\010peopleID\030\001 \001("
    "\005\022\017\n\007isChina\030\002 \001(\010\"<\n\020MessagePeopleRsp\022\014"
    "\n\004name\030\001 \001(\t\022\r\n\005phone\030\002 \001(\t\022\013\n\003age\030\003 \001(\005"
    "\"\021\n\017MessageLoginReq\"#\n\017MessageLoginRsp\022\020"
    "\n\010playerID\030\001 \001(\005\"\025\n\023MessageStartGameReq\""
    "\025\n\023MessageStartGameRsp\"\020\n\016MessageDealReq"
    "\"V\n\016MessageDealRsp\022\r\n\005upNum\030\001 \001(\005\022\017\n\007dow"
    "nNum\030\002 \001(\005\022$\n\tpokerList\030\003 \003(\0132\021.MessageD"
    "ataPoker\"\027\n\025MessageUpdateStateReq\"\304\002\n\025Me"
    "ssageUpdateStateRsp\022\021\n\tplayerIdx\030\001 \001(\005\022\021"
    "\n\tstateType\030\002 \001(\005\022#\n\010midPoker\030\003 \003(\0132\021.Me"
    "ssageDataPoker\022(\n\rlandlordPoker\030\004 \003(\0132\021."
    "MessageDataPoker\022$\n\tselfPoker\030\005 \003(\0132\021.Me"
    "ssageDataPoker\022\022\n\nupPokerNum\030\006 \001(\005\022\024\n\014do"
    "wnPokerNum\030\007 \001(\005\022\020\n\010laveTime\030\010 \001(\r\022\022\n\nla"
    "stIsGrad\030\t \001(\005\022\021\n\tlastIsOut\030\n \001(\005\022\023\n\013lan"
    "dlordIdx\030\013 \001(\005\022\030\n\020lastOutPlayerIdx\030\014 \001(\005"
    "\"(\n\026MessageGradLandlordReq\022\016\n\006isGrad\030\001 \001"
    "(\010\"\030\n\026MessageGradLandlordRsp\"6\n\022MessageO"
    "utPokerReq\022 \n\005poker\030\001 \003(\0132\021.MessageDataP"
    "oker\"\024\n\022MessageOutPokerRsp\"\026\n\024MessageGam"
    "eResultReq\")\n\024MessageGameResultRsp\022\021\n\tis"
    "Winning\030\001 \001(\010\"1\n\020MessageDataPoker\022\r\n\005col"
    "or\030\001 \001(\005\022\016\n\006number\030\002 \001(\005", 1064);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cmd.proto", &protobuf_RegisterTypes);
  MainProto::default_instance_ = new MainProto();
  MessagePeopleReq::default_instance_ = new MessagePeopleReq();
  MessagePeopleRsp::default_instance_ = new MessagePeopleRsp();
  MessageLoginReq::default_instance_ = new MessageLoginReq();
  MessageLoginRsp::default_instance_ = new MessageLoginRsp();
  MessageStartGameReq::default_instance_ = new MessageStartGameReq();
  MessageStartGameRsp::default_instance_ = new MessageStartGameRsp();
  MessageDealReq::default_instance_ = new MessageDealReq();
  MessageDealRsp::default_instance_ = new MessageDealRsp();
  MessageUpdateStateReq::default_instance_ = new MessageUpdateStateReq();
  MessageUpdateStateRsp::default_instance_ = new MessageUpdateStateRsp();
  MessageGradLandlordReq::default_instance_ = new MessageGradLandlordReq();
  MessageGradLandlordRsp::default_instance_ = new MessageGradLandlordRsp();
  MessageOutPokerReq::default_instance_ = new MessageOutPokerReq();
  MessageOutPokerRsp::default_instance_ = new MessageOutPokerRsp();
  MessageGameResultReq::default_instance_ = new MessageGameResultReq();
  MessageGameResultRsp::default_instance_ = new MessageGameResultRsp();
  MessageDataPoker::default_instance_ = new MessageDataPoker();
  MainProto::default_instance_->InitAsDefaultInstance();
  MessagePeopleReq::default_instance_->InitAsDefaultInstance();
  MessagePeopleRsp::default_instance_->InitAsDefaultInstance();
  MessageLoginReq::default_instance_->InitAsDefaultInstance();
  MessageLoginRsp::default_instance_->InitAsDefaultInstance();
  MessageStartGameReq::default_instance_->InitAsDefaultInstance();
  MessageStartGameRsp::default_instance_->InitAsDefaultInstance();
  MessageDealReq::default_instance_->InitAsDefaultInstance();
  MessageDealRsp::default_instance_->InitAsDefaultInstance();
  MessageUpdateStateReq::default_instance_->InitAsDefaultInstance();
  MessageUpdateStateRsp::default_instance_->InitAsDefaultInstance();
  MessageGradLandlordReq::default_instance_->InitAsDefaultInstance();
  MessageGradLandlordRsp::default_instance_->InitAsDefaultInstance();
  MessageOutPokerReq::default_instance_->InitAsDefaultInstance();
  MessageOutPokerRsp::default_instance_->InitAsDefaultInstance();
  MessageGameResultReq::default_instance_->InitAsDefaultInstance();
  MessageGameResultRsp::default_instance_->InitAsDefaultInstance();
  MessageDataPoker::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cmd_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cmd_2eproto {
  StaticDescriptorInitializer_cmd_2eproto() {
    protobuf_AddDesc_cmd_2eproto();
  }
} static_descriptor_initializer_cmd_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MainProto::kPlayerIDFieldNumber;
const int MainProto::kMessageIDFieldNumber;
const int MainProto::kMessageNameFieldNumber;
const int MainProto::kMessageDataFieldNumber;
const int MainProto::kServerTimeFieldNumber;
#endif  // !_MSC_VER

MainProto::MainProto()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MainProto)
}

void MainProto::InitAsDefaultInstance() {
}

MainProto::MainProto(const MainProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MainProto)
}

void MainProto::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  playerid_ = 0;
  messageid_ = 0;
  messagename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  servertime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MainProto::~MainProto() {
  // @@protoc_insertion_point(destructor:MainProto)
  SharedDtor();
}

void MainProto::SharedDtor() {
  if (messagename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagename_;
  }
  if (messagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete messagedata_;
  }
  if (this != default_instance_) {
  }
}

void MainProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MainProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MainProto_descriptor_;
}

const MainProto& MainProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MainProto* MainProto::default_instance_ = NULL;

MainProto* MainProto::New() const {
  return new MainProto;
}

void MainProto::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MainProto*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(playerid_, messageid_);
    if (has_messagename()) {
      if (messagename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagename_->clear();
      }
    }
    if (has_messagedata()) {
      if (messagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        messagedata_->clear();
      }
    }
    servertime_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MainProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MainProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_messageID;
        break;
      }

      // required int32 messageID = 2;
      case 2: {
        if (tag == 16) {
         parse_messageID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &messageid_)));
          set_has_messageid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_messageName;
        break;
      }

      // optional string messageName = 3;
      case 3: {
        if (tag == 26) {
         parse_messageName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagename().data(), this->messagename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_messageData;
        break;
      }

      // optional string messageData = 4;
      case 4: {
        if (tag == 34) {
         parse_messageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagedata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagedata().data(), this->messagedata().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "messagedata");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_serverTime;
        break;
      }

      // optional double serverTime = 5;
      case 5: {
        if (tag == 41) {
         parse_serverTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &servertime_)));
          set_has_servertime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MainProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MainProto)
  return false;
#undef DO_
}

void MainProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MainProto)
  // required int32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  // required int32 messageID = 2;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->messageid(), output);
  }

  // optional string messageName = 3;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagename(), output);
  }

  // optional string messageData = 4;
  if (has_messagedata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagedata().data(), this->messagedata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagedata");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->messagedata(), output);
  }

  // optional double serverTime = 5;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->servertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MainProto)
}

::google::protobuf::uint8* MainProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MainProto)
  // required int32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  // required int32 messageID = 2;
  if (has_messageid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->messageid(), target);
  }

  // optional string messageName = 3;
  if (has_messagename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagename().data(), this->messagename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagename(), target);
  }

  // optional string messageData = 4;
  if (has_messagedata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagedata().data(), this->messagedata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "messagedata");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->messagedata(), target);
  }

  // optional double serverTime = 5;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->servertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MainProto)
  return target;
}

int MainProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required int32 messageID = 2;
    if (has_messageid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->messageid());
    }

    // optional string messageName = 3;
    if (has_messagename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagename());
    }

    // optional string messageData = 4;
    if (has_messagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->messagedata());
    }

    // optional double serverTime = 5;
    if (has_servertime()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MainProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MainProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MainProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MainProto::MergeFrom(const MainProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_messageid()) {
      set_messageid(from.messageid());
    }
    if (from.has_messagename()) {
      set_messagename(from.messagename());
    }
    if (from.has_messagedata()) {
      set_messagedata(from.messagedata());
    }
    if (from.has_servertime()) {
      set_servertime(from.servertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MainProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MainProto::CopyFrom(const MainProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MainProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MainProto::Swap(MainProto* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(messageid_, other->messageid_);
    std::swap(messagename_, other->messagename_);
    std::swap(messagedata_, other->messagedata_);
    std::swap(servertime_, other->servertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MainProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MainProto_descriptor_;
  metadata.reflection = MainProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessagePeopleReq::kPeopleIDFieldNumber;
const int MessagePeopleReq::kIsChinaFieldNumber;
#endif  // !_MSC_VER

MessagePeopleReq::MessagePeopleReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessagePeopleReq)
}

void MessagePeopleReq::InitAsDefaultInstance() {
}

MessagePeopleReq::MessagePeopleReq(const MessagePeopleReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessagePeopleReq)
}

void MessagePeopleReq::SharedCtor() {
  _cached_size_ = 0;
  peopleid_ = 0;
  ischina_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePeopleReq::~MessagePeopleReq() {
  // @@protoc_insertion_point(destructor:MessagePeopleReq)
  SharedDtor();
}

void MessagePeopleReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessagePeopleReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePeopleReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePeopleReq_descriptor_;
}

const MessagePeopleReq& MessagePeopleReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessagePeopleReq* MessagePeopleReq::default_instance_ = NULL;

MessagePeopleReq* MessagePeopleReq::New() const {
  return new MessagePeopleReq;
}

void MessagePeopleReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessagePeopleReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(peopleid_, ischina_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessagePeopleReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessagePeopleReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 peopleID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peopleid_)));
          set_has_peopleid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_isChina;
        break;
      }

      // optional bool isChina = 2;
      case 2: {
        if (tag == 16) {
         parse_isChina:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischina_)));
          set_has_ischina();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessagePeopleReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessagePeopleReq)
  return false;
#undef DO_
}

void MessagePeopleReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessagePeopleReq)
  // optional int32 peopleID = 1;
  if (has_peopleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->peopleid(), output);
  }

  // optional bool isChina = 2;
  if (has_ischina()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ischina(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessagePeopleReq)
}

::google::protobuf::uint8* MessagePeopleReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessagePeopleReq)
  // optional int32 peopleID = 1;
  if (has_peopleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->peopleid(), target);
  }

  // optional bool isChina = 2;
  if (has_ischina()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ischina(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessagePeopleReq)
  return target;
}

int MessagePeopleReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 peopleID = 1;
    if (has_peopleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peopleid());
    }

    // optional bool isChina = 2;
    if (has_ischina()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePeopleReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagePeopleReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagePeopleReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessagePeopleReq::MergeFrom(const MessagePeopleReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_peopleid()) {
      set_peopleid(from.peopleid());
    }
    if (from.has_ischina()) {
      set_ischina(from.ischina());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessagePeopleReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePeopleReq::CopyFrom(const MessagePeopleReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePeopleReq::IsInitialized() const {

  return true;
}

void MessagePeopleReq::Swap(MessagePeopleReq* other) {
  if (other != this) {
    std::swap(peopleid_, other->peopleid_);
    std::swap(ischina_, other->ischina_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessagePeopleReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePeopleReq_descriptor_;
  metadata.reflection = MessagePeopleReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessagePeopleRsp::kNameFieldNumber;
const int MessagePeopleRsp::kPhoneFieldNumber;
const int MessagePeopleRsp::kAgeFieldNumber;
#endif  // !_MSC_VER

MessagePeopleRsp::MessagePeopleRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessagePeopleRsp)
}

void MessagePeopleRsp::InitAsDefaultInstance() {
}

MessagePeopleRsp::MessagePeopleRsp(const MessagePeopleRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessagePeopleRsp)
}

void MessagePeopleRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  age_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePeopleRsp::~MessagePeopleRsp() {
  // @@protoc_insertion_point(destructor:MessagePeopleRsp)
  SharedDtor();
}

void MessagePeopleRsp::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete phone_;
  }
  if (this != default_instance_) {
  }
}

void MessagePeopleRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePeopleRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePeopleRsp_descriptor_;
}

const MessagePeopleRsp& MessagePeopleRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessagePeopleRsp* MessagePeopleRsp::default_instance_ = NULL;

MessagePeopleRsp* MessagePeopleRsp::New() const {
  return new MessagePeopleRsp;
}

void MessagePeopleRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_phone()) {
      if (phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        phone_->clear();
      }
    }
    age_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessagePeopleRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessagePeopleRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_phone;
        break;
      }

      // optional string phone = 2;
      case 2: {
        if (tag == 18) {
         parse_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->phone().data(), this->phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_age;
        break;
      }

      // optional int32 age = 3;
      case 3: {
        if (tag == 24) {
         parse_age:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
          set_has_age();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessagePeopleRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessagePeopleRsp)
  return false;
#undef DO_
}

void MessagePeopleRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessagePeopleRsp)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->phone(), output);
  }

  // optional int32 age = 3;
  if (has_age()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessagePeopleRsp)
}

::google::protobuf::uint8* MessagePeopleRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessagePeopleRsp)
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string phone = 2;
  if (has_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->phone().data(), this->phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->phone(), target);
  }

  // optional int32 age = 3;
  if (has_age()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->age(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessagePeopleRsp)
  return target;
}

int MessagePeopleRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string phone = 2;
    if (has_phone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone());
    }

    // optional int32 age = 3;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePeopleRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagePeopleRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagePeopleRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessagePeopleRsp::MergeFrom(const MessagePeopleRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_phone()) {
      set_phone(from.phone());
    }
    if (from.has_age()) {
      set_age(from.age());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessagePeopleRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePeopleRsp::CopyFrom(const MessagePeopleRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePeopleRsp::IsInitialized() const {

  return true;
}

void MessagePeopleRsp::Swap(MessagePeopleRsp* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(phone_, other->phone_);
    std::swap(age_, other->age_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessagePeopleRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePeopleRsp_descriptor_;
  metadata.reflection = MessagePeopleRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MessageLoginReq::MessageLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageLoginReq)
}

void MessageLoginReq::InitAsDefaultInstance() {
}

MessageLoginReq::MessageLoginReq(const MessageLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageLoginReq)
}

void MessageLoginReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageLoginReq::~MessageLoginReq() {
  // @@protoc_insertion_point(destructor:MessageLoginReq)
  SharedDtor();
}

void MessageLoginReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageLoginReq_descriptor_;
}

const MessageLoginReq& MessageLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageLoginReq* MessageLoginReq::default_instance_ = NULL;

MessageLoginReq* MessageLoginReq::New() const {
  return new MessageLoginReq;
}

void MessageLoginReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MessageLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageLoginReq)
  return false;
#undef DO_
}

void MessageLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageLoginReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageLoginReq)
}

::google::protobuf::uint8* MessageLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageLoginReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageLoginReq)
  return target;
}

int MessageLoginReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageLoginReq::MergeFrom(const MessageLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageLoginReq::CopyFrom(const MessageLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageLoginReq::IsInitialized() const {

  return true;
}

void MessageLoginReq::Swap(MessageLoginReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageLoginReq_descriptor_;
  metadata.reflection = MessageLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageLoginRsp::kPlayerIDFieldNumber;
#endif  // !_MSC_VER

MessageLoginRsp::MessageLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageLoginRsp)
}

void MessageLoginRsp::InitAsDefaultInstance() {
}

MessageLoginRsp::MessageLoginRsp(const MessageLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageLoginRsp)
}

void MessageLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageLoginRsp::~MessageLoginRsp() {
  // @@protoc_insertion_point(destructor:MessageLoginRsp)
  SharedDtor();
}

void MessageLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageLoginRsp_descriptor_;
}

const MessageLoginRsp& MessageLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageLoginRsp* MessageLoginRsp::default_instance_ = NULL;

MessageLoginRsp* MessageLoginRsp::New() const {
  return new MessageLoginRsp;
}

void MessageLoginRsp::Clear() {
  playerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageLoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerID = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageLoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageLoginRsp)
  return false;
#undef DO_
}

void MessageLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageLoginRsp)
  // optional int32 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageLoginRsp)
}

::google::protobuf::uint8* MessageLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageLoginRsp)
  // optional int32 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageLoginRsp)
  return target;
}

int MessageLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageLoginRsp::MergeFrom(const MessageLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageLoginRsp::CopyFrom(const MessageLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageLoginRsp::IsInitialized() const {

  return true;
}

void MessageLoginRsp::Swap(MessageLoginRsp* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageLoginRsp_descriptor_;
  metadata.reflection = MessageLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MessageStartGameReq::MessageStartGameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageStartGameReq)
}

void MessageStartGameReq::InitAsDefaultInstance() {
}

MessageStartGameReq::MessageStartGameReq(const MessageStartGameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageStartGameReq)
}

void MessageStartGameReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageStartGameReq::~MessageStartGameReq() {
  // @@protoc_insertion_point(destructor:MessageStartGameReq)
  SharedDtor();
}

void MessageStartGameReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageStartGameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageStartGameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageStartGameReq_descriptor_;
}

const MessageStartGameReq& MessageStartGameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageStartGameReq* MessageStartGameReq::default_instance_ = NULL;

MessageStartGameReq* MessageStartGameReq::New() const {
  return new MessageStartGameReq;
}

void MessageStartGameReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageStartGameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageStartGameReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MessageStartGameReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageStartGameReq)
  return false;
#undef DO_
}

void MessageStartGameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageStartGameReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageStartGameReq)
}

::google::protobuf::uint8* MessageStartGameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageStartGameReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageStartGameReq)
  return target;
}

int MessageStartGameReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageStartGameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageStartGameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageStartGameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageStartGameReq::MergeFrom(const MessageStartGameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageStartGameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageStartGameReq::CopyFrom(const MessageStartGameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageStartGameReq::IsInitialized() const {

  return true;
}

void MessageStartGameReq::Swap(MessageStartGameReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageStartGameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageStartGameReq_descriptor_;
  metadata.reflection = MessageStartGameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MessageStartGameRsp::MessageStartGameRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageStartGameRsp)
}

void MessageStartGameRsp::InitAsDefaultInstance() {
}

MessageStartGameRsp::MessageStartGameRsp(const MessageStartGameRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageStartGameRsp)
}

void MessageStartGameRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageStartGameRsp::~MessageStartGameRsp() {
  // @@protoc_insertion_point(destructor:MessageStartGameRsp)
  SharedDtor();
}

void MessageStartGameRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageStartGameRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageStartGameRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageStartGameRsp_descriptor_;
}

const MessageStartGameRsp& MessageStartGameRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageStartGameRsp* MessageStartGameRsp::default_instance_ = NULL;

MessageStartGameRsp* MessageStartGameRsp::New() const {
  return new MessageStartGameRsp;
}

void MessageStartGameRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageStartGameRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageStartGameRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MessageStartGameRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageStartGameRsp)
  return false;
#undef DO_
}

void MessageStartGameRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageStartGameRsp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageStartGameRsp)
}

::google::protobuf::uint8* MessageStartGameRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageStartGameRsp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageStartGameRsp)
  return target;
}

int MessageStartGameRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageStartGameRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageStartGameRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageStartGameRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageStartGameRsp::MergeFrom(const MessageStartGameRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageStartGameRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageStartGameRsp::CopyFrom(const MessageStartGameRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageStartGameRsp::IsInitialized() const {

  return true;
}

void MessageStartGameRsp::Swap(MessageStartGameRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageStartGameRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageStartGameRsp_descriptor_;
  metadata.reflection = MessageStartGameRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MessageDealReq::MessageDealReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageDealReq)
}

void MessageDealReq::InitAsDefaultInstance() {
}

MessageDealReq::MessageDealReq(const MessageDealReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageDealReq)
}

void MessageDealReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageDealReq::~MessageDealReq() {
  // @@protoc_insertion_point(destructor:MessageDealReq)
  SharedDtor();
}

void MessageDealReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageDealReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageDealReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageDealReq_descriptor_;
}

const MessageDealReq& MessageDealReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageDealReq* MessageDealReq::default_instance_ = NULL;

MessageDealReq* MessageDealReq::New() const {
  return new MessageDealReq;
}

void MessageDealReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageDealReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageDealReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MessageDealReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageDealReq)
  return false;
#undef DO_
}

void MessageDealReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageDealReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageDealReq)
}

::google::protobuf::uint8* MessageDealReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageDealReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageDealReq)
  return target;
}

int MessageDealReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageDealReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageDealReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageDealReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageDealReq::MergeFrom(const MessageDealReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageDealReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageDealReq::CopyFrom(const MessageDealReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageDealReq::IsInitialized() const {

  return true;
}

void MessageDealReq::Swap(MessageDealReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageDealReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageDealReq_descriptor_;
  metadata.reflection = MessageDealReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageDealRsp::kUpNumFieldNumber;
const int MessageDealRsp::kDownNumFieldNumber;
const int MessageDealRsp::kPokerListFieldNumber;
#endif  // !_MSC_VER

MessageDealRsp::MessageDealRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageDealRsp)
}

void MessageDealRsp::InitAsDefaultInstance() {
}

MessageDealRsp::MessageDealRsp(const MessageDealRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageDealRsp)
}

void MessageDealRsp::SharedCtor() {
  _cached_size_ = 0;
  upnum_ = 0;
  downnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageDealRsp::~MessageDealRsp() {
  // @@protoc_insertion_point(destructor:MessageDealRsp)
  SharedDtor();
}

void MessageDealRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageDealRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageDealRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageDealRsp_descriptor_;
}

const MessageDealRsp& MessageDealRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageDealRsp* MessageDealRsp::default_instance_ = NULL;

MessageDealRsp* MessageDealRsp::New() const {
  return new MessageDealRsp;
}

void MessageDealRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageDealRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(upnum_, downnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  pokerlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageDealRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageDealRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 upNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upnum_)));
          set_has_upnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_downNum;
        break;
      }

      // optional int32 downNum = 2;
      case 2: {
        if (tag == 16) {
         parse_downNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downnum_)));
          set_has_downnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pokerList;
        break;
      }

      // repeated .MessageDataPoker pokerList = 3;
      case 3: {
        if (tag == 26) {
         parse_pokerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pokerlist()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pokerList;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageDealRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageDealRsp)
  return false;
#undef DO_
}

void MessageDealRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageDealRsp)
  // optional int32 upNum = 1;
  if (has_upnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->upnum(), output);
  }

  // optional int32 downNum = 2;
  if (has_downnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->downnum(), output);
  }

  // repeated .MessageDataPoker pokerList = 3;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pokerlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageDealRsp)
}

::google::protobuf::uint8* MessageDealRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageDealRsp)
  // optional int32 upNum = 1;
  if (has_upnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->upnum(), target);
  }

  // optional int32 downNum = 2;
  if (has_downnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->downnum(), target);
  }

  // repeated .MessageDataPoker pokerList = 3;
  for (int i = 0; i < this->pokerlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pokerlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageDealRsp)
  return target;
}

int MessageDealRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 upNum = 1;
    if (has_upnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upnum());
    }

    // optional int32 downNum = 2;
    if (has_downnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downnum());
    }

  }
  // repeated .MessageDataPoker pokerList = 3;
  total_size += 1 * this->pokerlist_size();
  for (int i = 0; i < this->pokerlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pokerlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageDealRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageDealRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageDealRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageDealRsp::MergeFrom(const MessageDealRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  pokerlist_.MergeFrom(from.pokerlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upnum()) {
      set_upnum(from.upnum());
    }
    if (from.has_downnum()) {
      set_downnum(from.downnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageDealRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageDealRsp::CopyFrom(const MessageDealRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageDealRsp::IsInitialized() const {

  return true;
}

void MessageDealRsp::Swap(MessageDealRsp* other) {
  if (other != this) {
    std::swap(upnum_, other->upnum_);
    std::swap(downnum_, other->downnum_);
    pokerlist_.Swap(&other->pokerlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageDealRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageDealRsp_descriptor_;
  metadata.reflection = MessageDealRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MessageUpdateStateReq::MessageUpdateStateReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageUpdateStateReq)
}

void MessageUpdateStateReq::InitAsDefaultInstance() {
}

MessageUpdateStateReq::MessageUpdateStateReq(const MessageUpdateStateReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageUpdateStateReq)
}

void MessageUpdateStateReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageUpdateStateReq::~MessageUpdateStateReq() {
  // @@protoc_insertion_point(destructor:MessageUpdateStateReq)
  SharedDtor();
}

void MessageUpdateStateReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageUpdateStateReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageUpdateStateReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageUpdateStateReq_descriptor_;
}

const MessageUpdateStateReq& MessageUpdateStateReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageUpdateStateReq* MessageUpdateStateReq::default_instance_ = NULL;

MessageUpdateStateReq* MessageUpdateStateReq::New() const {
  return new MessageUpdateStateReq;
}

void MessageUpdateStateReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageUpdateStateReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageUpdateStateReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MessageUpdateStateReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageUpdateStateReq)
  return false;
#undef DO_
}

void MessageUpdateStateReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageUpdateStateReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageUpdateStateReq)
}

::google::protobuf::uint8* MessageUpdateStateReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageUpdateStateReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageUpdateStateReq)
  return target;
}

int MessageUpdateStateReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageUpdateStateReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageUpdateStateReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageUpdateStateReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageUpdateStateReq::MergeFrom(const MessageUpdateStateReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageUpdateStateReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageUpdateStateReq::CopyFrom(const MessageUpdateStateReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageUpdateStateReq::IsInitialized() const {

  return true;
}

void MessageUpdateStateReq::Swap(MessageUpdateStateReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageUpdateStateReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageUpdateStateReq_descriptor_;
  metadata.reflection = MessageUpdateStateReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageUpdateStateRsp::kPlayerIdxFieldNumber;
const int MessageUpdateStateRsp::kStateTypeFieldNumber;
const int MessageUpdateStateRsp::kMidPokerFieldNumber;
const int MessageUpdateStateRsp::kLandlordPokerFieldNumber;
const int MessageUpdateStateRsp::kSelfPokerFieldNumber;
const int MessageUpdateStateRsp::kUpPokerNumFieldNumber;
const int MessageUpdateStateRsp::kDownPokerNumFieldNumber;
const int MessageUpdateStateRsp::kLaveTimeFieldNumber;
const int MessageUpdateStateRsp::kLastIsGradFieldNumber;
const int MessageUpdateStateRsp::kLastIsOutFieldNumber;
const int MessageUpdateStateRsp::kLandlordIdxFieldNumber;
const int MessageUpdateStateRsp::kLastOutPlayerIdxFieldNumber;
#endif  // !_MSC_VER

MessageUpdateStateRsp::MessageUpdateStateRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageUpdateStateRsp)
}

void MessageUpdateStateRsp::InitAsDefaultInstance() {
}

MessageUpdateStateRsp::MessageUpdateStateRsp(const MessageUpdateStateRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageUpdateStateRsp)
}

void MessageUpdateStateRsp::SharedCtor() {
  _cached_size_ = 0;
  playeridx_ = 0;
  statetype_ = 0;
  uppokernum_ = 0;
  downpokernum_ = 0;
  lavetime_ = 0u;
  lastisgrad_ = 0;
  lastisout_ = 0;
  landlordidx_ = 0;
  lastoutplayeridx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageUpdateStateRsp::~MessageUpdateStateRsp() {
  // @@protoc_insertion_point(destructor:MessageUpdateStateRsp)
  SharedDtor();
}

void MessageUpdateStateRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageUpdateStateRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageUpdateStateRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageUpdateStateRsp_descriptor_;
}

const MessageUpdateStateRsp& MessageUpdateStateRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageUpdateStateRsp* MessageUpdateStateRsp::default_instance_ = NULL;

MessageUpdateStateRsp* MessageUpdateStateRsp::New() const {
  return new MessageUpdateStateRsp;
}

void MessageUpdateStateRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageUpdateStateRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 227) {
    ZR_(playeridx_, statetype_);
    ZR_(uppokernum_, lavetime_);
  }
  ZR_(lastisgrad_, lastoutplayeridx_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  midpoker_.Clear();
  landlordpoker_.Clear();
  selfpoker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageUpdateStateRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageUpdateStateRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 playerIdx = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playeridx_)));
          set_has_playeridx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_stateType;
        break;
      }

      // optional int32 stateType = 2;
      case 2: {
        if (tag == 16) {
         parse_stateType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statetype_)));
          set_has_statetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_midPoker;
        break;
      }

      // repeated .MessageDataPoker midPoker = 3;
      case 3: {
        if (tag == 26) {
         parse_midPoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_midpoker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_midPoker;
        if (input->ExpectTag(34)) goto parse_landlordPoker;
        break;
      }

      // repeated .MessageDataPoker landlordPoker = 4;
      case 4: {
        if (tag == 34) {
         parse_landlordPoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_landlordpoker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_landlordPoker;
        if (input->ExpectTag(42)) goto parse_selfPoker;
        break;
      }

      // repeated .MessageDataPoker selfPoker = 5;
      case 5: {
        if (tag == 42) {
         parse_selfPoker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selfpoker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_selfPoker;
        if (input->ExpectTag(48)) goto parse_upPokerNum;
        break;
      }

      // optional int32 upPokerNum = 6;
      case 6: {
        if (tag == 48) {
         parse_upPokerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uppokernum_)));
          set_has_uppokernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_downPokerNum;
        break;
      }

      // optional int32 downPokerNum = 7;
      case 7: {
        if (tag == 56) {
         parse_downPokerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &downpokernum_)));
          set_has_downpokernum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_laveTime;
        break;
      }

      // optional uint32 laveTime = 8;
      case 8: {
        if (tag == 64) {
         parse_laveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lavetime_)));
          set_has_lavetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_lastIsGrad;
        break;
      }

      // optional int32 lastIsGrad = 9;
      case 9: {
        if (tag == 72) {
         parse_lastIsGrad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastisgrad_)));
          set_has_lastisgrad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_lastIsOut;
        break;
      }

      // optional int32 lastIsOut = 10;
      case 10: {
        if (tag == 80) {
         parse_lastIsOut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastisout_)));
          set_has_lastisout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_landlordIdx;
        break;
      }

      // optional int32 landlordIdx = 11;
      case 11: {
        if (tag == 88) {
         parse_landlordIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &landlordidx_)));
          set_has_landlordidx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_lastOutPlayerIdx;
        break;
      }

      // optional int32 lastOutPlayerIdx = 12;
      case 12: {
        if (tag == 96) {
         parse_lastOutPlayerIdx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastoutplayeridx_)));
          set_has_lastoutplayeridx();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageUpdateStateRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageUpdateStateRsp)
  return false;
#undef DO_
}

void MessageUpdateStateRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageUpdateStateRsp)
  // optional int32 playerIdx = 1;
  if (has_playeridx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playeridx(), output);
  }

  // optional int32 stateType = 2;
  if (has_statetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->statetype(), output);
  }

  // repeated .MessageDataPoker midPoker = 3;
  for (int i = 0; i < this->midpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->midpoker(i), output);
  }

  // repeated .MessageDataPoker landlordPoker = 4;
  for (int i = 0; i < this->landlordpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->landlordpoker(i), output);
  }

  // repeated .MessageDataPoker selfPoker = 5;
  for (int i = 0; i < this->selfpoker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->selfpoker(i), output);
  }

  // optional int32 upPokerNum = 6;
  if (has_uppokernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->uppokernum(), output);
  }

  // optional int32 downPokerNum = 7;
  if (has_downpokernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->downpokernum(), output);
  }

  // optional uint32 laveTime = 8;
  if (has_lavetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->lavetime(), output);
  }

  // optional int32 lastIsGrad = 9;
  if (has_lastisgrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->lastisgrad(), output);
  }

  // optional int32 lastIsOut = 10;
  if (has_lastisout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->lastisout(), output);
  }

  // optional int32 landlordIdx = 11;
  if (has_landlordidx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->landlordidx(), output);
  }

  // optional int32 lastOutPlayerIdx = 12;
  if (has_lastoutplayeridx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->lastoutplayeridx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageUpdateStateRsp)
}

::google::protobuf::uint8* MessageUpdateStateRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageUpdateStateRsp)
  // optional int32 playerIdx = 1;
  if (has_playeridx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playeridx(), target);
  }

  // optional int32 stateType = 2;
  if (has_statetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->statetype(), target);
  }

  // repeated .MessageDataPoker midPoker = 3;
  for (int i = 0; i < this->midpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->midpoker(i), target);
  }

  // repeated .MessageDataPoker landlordPoker = 4;
  for (int i = 0; i < this->landlordpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->landlordpoker(i), target);
  }

  // repeated .MessageDataPoker selfPoker = 5;
  for (int i = 0; i < this->selfpoker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->selfpoker(i), target);
  }

  // optional int32 upPokerNum = 6;
  if (has_uppokernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->uppokernum(), target);
  }

  // optional int32 downPokerNum = 7;
  if (has_downpokernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->downpokernum(), target);
  }

  // optional uint32 laveTime = 8;
  if (has_lavetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->lavetime(), target);
  }

  // optional int32 lastIsGrad = 9;
  if (has_lastisgrad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->lastisgrad(), target);
  }

  // optional int32 lastIsOut = 10;
  if (has_lastisout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->lastisout(), target);
  }

  // optional int32 landlordIdx = 11;
  if (has_landlordidx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->landlordidx(), target);
  }

  // optional int32 lastOutPlayerIdx = 12;
  if (has_lastoutplayeridx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->lastoutplayeridx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageUpdateStateRsp)
  return target;
}

int MessageUpdateStateRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 playerIdx = 1;
    if (has_playeridx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playeridx());
    }

    // optional int32 stateType = 2;
    if (has_statetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statetype());
    }

    // optional int32 upPokerNum = 6;
    if (has_uppokernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uppokernum());
    }

    // optional int32 downPokerNum = 7;
    if (has_downpokernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->downpokernum());
    }

    // optional uint32 laveTime = 8;
    if (has_lavetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lavetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 lastIsGrad = 9;
    if (has_lastisgrad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastisgrad());
    }

    // optional int32 lastIsOut = 10;
    if (has_lastisout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastisout());
    }

    // optional int32 landlordIdx = 11;
    if (has_landlordidx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->landlordidx());
    }

    // optional int32 lastOutPlayerIdx = 12;
    if (has_lastoutplayeridx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastoutplayeridx());
    }

  }
  // repeated .MessageDataPoker midPoker = 3;
  total_size += 1 * this->midpoker_size();
  for (int i = 0; i < this->midpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->midpoker(i));
  }

  // repeated .MessageDataPoker landlordPoker = 4;
  total_size += 1 * this->landlordpoker_size();
  for (int i = 0; i < this->landlordpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->landlordpoker(i));
  }

  // repeated .MessageDataPoker selfPoker = 5;
  total_size += 1 * this->selfpoker_size();
  for (int i = 0; i < this->selfpoker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selfpoker(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageUpdateStateRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageUpdateStateRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageUpdateStateRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageUpdateStateRsp::MergeFrom(const MessageUpdateStateRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  midpoker_.MergeFrom(from.midpoker_);
  landlordpoker_.MergeFrom(from.landlordpoker_);
  selfpoker_.MergeFrom(from.selfpoker_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playeridx()) {
      set_playeridx(from.playeridx());
    }
    if (from.has_statetype()) {
      set_statetype(from.statetype());
    }
    if (from.has_uppokernum()) {
      set_uppokernum(from.uppokernum());
    }
    if (from.has_downpokernum()) {
      set_downpokernum(from.downpokernum());
    }
    if (from.has_lavetime()) {
      set_lavetime(from.lavetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lastisgrad()) {
      set_lastisgrad(from.lastisgrad());
    }
    if (from.has_lastisout()) {
      set_lastisout(from.lastisout());
    }
    if (from.has_landlordidx()) {
      set_landlordidx(from.landlordidx());
    }
    if (from.has_lastoutplayeridx()) {
      set_lastoutplayeridx(from.lastoutplayeridx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageUpdateStateRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageUpdateStateRsp::CopyFrom(const MessageUpdateStateRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageUpdateStateRsp::IsInitialized() const {

  return true;
}

void MessageUpdateStateRsp::Swap(MessageUpdateStateRsp* other) {
  if (other != this) {
    std::swap(playeridx_, other->playeridx_);
    std::swap(statetype_, other->statetype_);
    midpoker_.Swap(&other->midpoker_);
    landlordpoker_.Swap(&other->landlordpoker_);
    selfpoker_.Swap(&other->selfpoker_);
    std::swap(uppokernum_, other->uppokernum_);
    std::swap(downpokernum_, other->downpokernum_);
    std::swap(lavetime_, other->lavetime_);
    std::swap(lastisgrad_, other->lastisgrad_);
    std::swap(lastisout_, other->lastisout_);
    std::swap(landlordidx_, other->landlordidx_);
    std::swap(lastoutplayeridx_, other->lastoutplayeridx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageUpdateStateRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageUpdateStateRsp_descriptor_;
  metadata.reflection = MessageUpdateStateRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageGradLandlordReq::kIsGradFieldNumber;
#endif  // !_MSC_VER

MessageGradLandlordReq::MessageGradLandlordReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageGradLandlordReq)
}

void MessageGradLandlordReq::InitAsDefaultInstance() {
}

MessageGradLandlordReq::MessageGradLandlordReq(const MessageGradLandlordReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageGradLandlordReq)
}

void MessageGradLandlordReq::SharedCtor() {
  _cached_size_ = 0;
  isgrad_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageGradLandlordReq::~MessageGradLandlordReq() {
  // @@protoc_insertion_point(destructor:MessageGradLandlordReq)
  SharedDtor();
}

void MessageGradLandlordReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageGradLandlordReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageGradLandlordReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageGradLandlordReq_descriptor_;
}

const MessageGradLandlordReq& MessageGradLandlordReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageGradLandlordReq* MessageGradLandlordReq::default_instance_ = NULL;

MessageGradLandlordReq* MessageGradLandlordReq::New() const {
  return new MessageGradLandlordReq;
}

void MessageGradLandlordReq::Clear() {
  isgrad_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageGradLandlordReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageGradLandlordReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isGrad = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgrad_)));
          set_has_isgrad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageGradLandlordReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageGradLandlordReq)
  return false;
#undef DO_
}

void MessageGradLandlordReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageGradLandlordReq)
  // optional bool isGrad = 1;
  if (has_isgrad()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isgrad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageGradLandlordReq)
}

::google::protobuf::uint8* MessageGradLandlordReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageGradLandlordReq)
  // optional bool isGrad = 1;
  if (has_isgrad()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isgrad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageGradLandlordReq)
  return target;
}

int MessageGradLandlordReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isGrad = 1;
    if (has_isgrad()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageGradLandlordReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageGradLandlordReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageGradLandlordReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageGradLandlordReq::MergeFrom(const MessageGradLandlordReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isgrad()) {
      set_isgrad(from.isgrad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageGradLandlordReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageGradLandlordReq::CopyFrom(const MessageGradLandlordReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageGradLandlordReq::IsInitialized() const {

  return true;
}

void MessageGradLandlordReq::Swap(MessageGradLandlordReq* other) {
  if (other != this) {
    std::swap(isgrad_, other->isgrad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageGradLandlordReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageGradLandlordReq_descriptor_;
  metadata.reflection = MessageGradLandlordReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MessageGradLandlordRsp::MessageGradLandlordRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageGradLandlordRsp)
}

void MessageGradLandlordRsp::InitAsDefaultInstance() {
}

MessageGradLandlordRsp::MessageGradLandlordRsp(const MessageGradLandlordRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageGradLandlordRsp)
}

void MessageGradLandlordRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageGradLandlordRsp::~MessageGradLandlordRsp() {
  // @@protoc_insertion_point(destructor:MessageGradLandlordRsp)
  SharedDtor();
}

void MessageGradLandlordRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageGradLandlordRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageGradLandlordRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageGradLandlordRsp_descriptor_;
}

const MessageGradLandlordRsp& MessageGradLandlordRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageGradLandlordRsp* MessageGradLandlordRsp::default_instance_ = NULL;

MessageGradLandlordRsp* MessageGradLandlordRsp::New() const {
  return new MessageGradLandlordRsp;
}

void MessageGradLandlordRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageGradLandlordRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageGradLandlordRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MessageGradLandlordRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageGradLandlordRsp)
  return false;
#undef DO_
}

void MessageGradLandlordRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageGradLandlordRsp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageGradLandlordRsp)
}

::google::protobuf::uint8* MessageGradLandlordRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageGradLandlordRsp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageGradLandlordRsp)
  return target;
}

int MessageGradLandlordRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageGradLandlordRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageGradLandlordRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageGradLandlordRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageGradLandlordRsp::MergeFrom(const MessageGradLandlordRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageGradLandlordRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageGradLandlordRsp::CopyFrom(const MessageGradLandlordRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageGradLandlordRsp::IsInitialized() const {

  return true;
}

void MessageGradLandlordRsp::Swap(MessageGradLandlordRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageGradLandlordRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageGradLandlordRsp_descriptor_;
  metadata.reflection = MessageGradLandlordRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageOutPokerReq::kPokerFieldNumber;
#endif  // !_MSC_VER

MessageOutPokerReq::MessageOutPokerReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageOutPokerReq)
}

void MessageOutPokerReq::InitAsDefaultInstance() {
}

MessageOutPokerReq::MessageOutPokerReq(const MessageOutPokerReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageOutPokerReq)
}

void MessageOutPokerReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageOutPokerReq::~MessageOutPokerReq() {
  // @@protoc_insertion_point(destructor:MessageOutPokerReq)
  SharedDtor();
}

void MessageOutPokerReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageOutPokerReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageOutPokerReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageOutPokerReq_descriptor_;
}

const MessageOutPokerReq& MessageOutPokerReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageOutPokerReq* MessageOutPokerReq::default_instance_ = NULL;

MessageOutPokerReq* MessageOutPokerReq::New() const {
  return new MessageOutPokerReq;
}

void MessageOutPokerReq::Clear() {
  poker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageOutPokerReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageOutPokerReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MessageDataPoker poker = 1;
      case 1: {
        if (tag == 10) {
         parse_poker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_poker()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_poker;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageOutPokerReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageOutPokerReq)
  return false;
#undef DO_
}

void MessageOutPokerReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageOutPokerReq)
  // repeated .MessageDataPoker poker = 1;
  for (int i = 0; i < this->poker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->poker(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageOutPokerReq)
}

::google::protobuf::uint8* MessageOutPokerReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageOutPokerReq)
  // repeated .MessageDataPoker poker = 1;
  for (int i = 0; i < this->poker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->poker(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageOutPokerReq)
  return target;
}

int MessageOutPokerReq::ByteSize() const {
  int total_size = 0;

  // repeated .MessageDataPoker poker = 1;
  total_size += 1 * this->poker_size();
  for (int i = 0; i < this->poker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->poker(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageOutPokerReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageOutPokerReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageOutPokerReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageOutPokerReq::MergeFrom(const MessageOutPokerReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  poker_.MergeFrom(from.poker_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageOutPokerReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageOutPokerReq::CopyFrom(const MessageOutPokerReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOutPokerReq::IsInitialized() const {

  return true;
}

void MessageOutPokerReq::Swap(MessageOutPokerReq* other) {
  if (other != this) {
    poker_.Swap(&other->poker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageOutPokerReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageOutPokerReq_descriptor_;
  metadata.reflection = MessageOutPokerReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MessageOutPokerRsp::MessageOutPokerRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageOutPokerRsp)
}

void MessageOutPokerRsp::InitAsDefaultInstance() {
}

MessageOutPokerRsp::MessageOutPokerRsp(const MessageOutPokerRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageOutPokerRsp)
}

void MessageOutPokerRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageOutPokerRsp::~MessageOutPokerRsp() {
  // @@protoc_insertion_point(destructor:MessageOutPokerRsp)
  SharedDtor();
}

void MessageOutPokerRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageOutPokerRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageOutPokerRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageOutPokerRsp_descriptor_;
}

const MessageOutPokerRsp& MessageOutPokerRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageOutPokerRsp* MessageOutPokerRsp::default_instance_ = NULL;

MessageOutPokerRsp* MessageOutPokerRsp::New() const {
  return new MessageOutPokerRsp;
}

void MessageOutPokerRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageOutPokerRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageOutPokerRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MessageOutPokerRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageOutPokerRsp)
  return false;
#undef DO_
}

void MessageOutPokerRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageOutPokerRsp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageOutPokerRsp)
}

::google::protobuf::uint8* MessageOutPokerRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageOutPokerRsp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageOutPokerRsp)
  return target;
}

int MessageOutPokerRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageOutPokerRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageOutPokerRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageOutPokerRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageOutPokerRsp::MergeFrom(const MessageOutPokerRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageOutPokerRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageOutPokerRsp::CopyFrom(const MessageOutPokerRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageOutPokerRsp::IsInitialized() const {

  return true;
}

void MessageOutPokerRsp::Swap(MessageOutPokerRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageOutPokerRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageOutPokerRsp_descriptor_;
  metadata.reflection = MessageOutPokerRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MessageGameResultReq::MessageGameResultReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageGameResultReq)
}

void MessageGameResultReq::InitAsDefaultInstance() {
}

MessageGameResultReq::MessageGameResultReq(const MessageGameResultReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageGameResultReq)
}

void MessageGameResultReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageGameResultReq::~MessageGameResultReq() {
  // @@protoc_insertion_point(destructor:MessageGameResultReq)
  SharedDtor();
}

void MessageGameResultReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageGameResultReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageGameResultReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageGameResultReq_descriptor_;
}

const MessageGameResultReq& MessageGameResultReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageGameResultReq* MessageGameResultReq::default_instance_ = NULL;

MessageGameResultReq* MessageGameResultReq::New() const {
  return new MessageGameResultReq;
}

void MessageGameResultReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageGameResultReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageGameResultReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:MessageGameResultReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageGameResultReq)
  return false;
#undef DO_
}

void MessageGameResultReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageGameResultReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageGameResultReq)
}

::google::protobuf::uint8* MessageGameResultReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageGameResultReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageGameResultReq)
  return target;
}

int MessageGameResultReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageGameResultReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageGameResultReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageGameResultReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageGameResultReq::MergeFrom(const MessageGameResultReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageGameResultReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageGameResultReq::CopyFrom(const MessageGameResultReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageGameResultReq::IsInitialized() const {

  return true;
}

void MessageGameResultReq::Swap(MessageGameResultReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageGameResultReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageGameResultReq_descriptor_;
  metadata.reflection = MessageGameResultReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageGameResultRsp::kIsWinningFieldNumber;
#endif  // !_MSC_VER

MessageGameResultRsp::MessageGameResultRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageGameResultRsp)
}

void MessageGameResultRsp::InitAsDefaultInstance() {
}

MessageGameResultRsp::MessageGameResultRsp(const MessageGameResultRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageGameResultRsp)
}

void MessageGameResultRsp::SharedCtor() {
  _cached_size_ = 0;
  iswinning_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageGameResultRsp::~MessageGameResultRsp() {
  // @@protoc_insertion_point(destructor:MessageGameResultRsp)
  SharedDtor();
}

void MessageGameResultRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageGameResultRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageGameResultRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageGameResultRsp_descriptor_;
}

const MessageGameResultRsp& MessageGameResultRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageGameResultRsp* MessageGameResultRsp::default_instance_ = NULL;

MessageGameResultRsp* MessageGameResultRsp::New() const {
  return new MessageGameResultRsp;
}

void MessageGameResultRsp::Clear() {
  iswinning_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageGameResultRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageGameResultRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool isWinning = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswinning_)));
          set_has_iswinning();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageGameResultRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageGameResultRsp)
  return false;
#undef DO_
}

void MessageGameResultRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageGameResultRsp)
  // optional bool isWinning = 1;
  if (has_iswinning()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iswinning(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageGameResultRsp)
}

::google::protobuf::uint8* MessageGameResultRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageGameResultRsp)
  // optional bool isWinning = 1;
  if (has_iswinning()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iswinning(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageGameResultRsp)
  return target;
}

int MessageGameResultRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool isWinning = 1;
    if (has_iswinning()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageGameResultRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageGameResultRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageGameResultRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageGameResultRsp::MergeFrom(const MessageGameResultRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iswinning()) {
      set_iswinning(from.iswinning());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageGameResultRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageGameResultRsp::CopyFrom(const MessageGameResultRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageGameResultRsp::IsInitialized() const {

  return true;
}

void MessageGameResultRsp::Swap(MessageGameResultRsp* other) {
  if (other != this) {
    std::swap(iswinning_, other->iswinning_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageGameResultRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageGameResultRsp_descriptor_;
  metadata.reflection = MessageGameResultRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageDataPoker::kColorFieldNumber;
const int MessageDataPoker::kNumberFieldNumber;
#endif  // !_MSC_VER

MessageDataPoker::MessageDataPoker()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageDataPoker)
}

void MessageDataPoker::InitAsDefaultInstance() {
}

MessageDataPoker::MessageDataPoker(const MessageDataPoker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageDataPoker)
}

void MessageDataPoker::SharedCtor() {
  _cached_size_ = 0;
  color_ = 0;
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageDataPoker::~MessageDataPoker() {
  // @@protoc_insertion_point(destructor:MessageDataPoker)
  SharedDtor();
}

void MessageDataPoker::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MessageDataPoker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageDataPoker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageDataPoker_descriptor_;
}

const MessageDataPoker& MessageDataPoker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cmd_2eproto();
  return *default_instance_;
}

MessageDataPoker* MessageDataPoker::default_instance_ = NULL;

MessageDataPoker* MessageDataPoker::New() const {
  return new MessageDataPoker;
}

void MessageDataPoker::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessageDataPoker*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(color_, number_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageDataPoker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageDataPoker)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 color = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
          set_has_color();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_number;
        break;
      }

      // optional int32 number = 2;
      case 2: {
        if (tag == 16) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageDataPoker)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageDataPoker)
  return false;
#undef DO_
}

void MessageDataPoker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageDataPoker)
  // optional int32 color = 1;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color(), output);
  }

  // optional int32 number = 2;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageDataPoker)
}

::google::protobuf::uint8* MessageDataPoker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageDataPoker)
  // optional int32 color = 1;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color(), target);
  }

  // optional int32 number = 2;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageDataPoker)
  return target;
}

int MessageDataPoker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 color = 1;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->color());
    }

    // optional int32 number = 2;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageDataPoker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageDataPoker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageDataPoker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageDataPoker::MergeFrom(const MessageDataPoker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_color()) {
      set_color(from.color());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageDataPoker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageDataPoker::CopyFrom(const MessageDataPoker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageDataPoker::IsInitialized() const {

  return true;
}

void MessageDataPoker::Swap(MessageDataPoker* other) {
  if (other != this) {
    std::swap(color_, other->color_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageDataPoker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageDataPoker_descriptor_;
  metadata.reflection = MessageDataPoker_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
